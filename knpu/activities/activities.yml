basics_print_variables:
    question: |
        Two variables - `price` and `name` are being passed into the template.
        Print `name` inside the `h1` tag and `price` inside the `.price` div.
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: basics/context_print_variables.php
    asserts: basics/PrintVariablesSuite.php

basics_loop_variables:
    question: |
        You're now being passed a variable called `tags`, which is just a
        collection of strings that this product has been tagged with. Loop
        over these and print them inside the `ul.tags` element.
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: basics/context_loop_variables.php
    asserts: basics/LoopVariablesSuite.php

functions_length:
    question: |
        Remember the "tags" variable we looped over? Use the "length" Twig
        filter to print out the number of tags in the `data-tag-count` attribute
        of the `ul.tags` element.
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: basics/context_loop_variables.php
    asserts: functions/LengthFilterSuite.php

functions_dump:
    question: |
        A developer has just passed in another varible to the template that
        represents when the product was originally posted. Use the `dump`
        function to print out all of the current variables.
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: functions/context_print_posted_at.php
    asserts: functions/DumpSuite.php

functions_print_posted_at:
    question: |
        Awesome! Now that you know the new variable is called "postedAt", print
        it out inside a new element with a `posted-at` class. Use the "date"
        filter using the format "Y-m-d".
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: functions/context_print_posted_at.php
    asserts: functions/PrintPostedAtSuite.php

objects_property_accessor:
    question: |
        Now instead of `name`, `price` and `postedAt` variables, you're being passed
        a `product` variable, which is an object that has `name`, `price` and `postedAt`
        properties on it. Print `name` inside the `h1` tag, `price` inside
        the `.product-price` and `postedAt` inside `.posted-at`.
    skeletons: { product.twig: basicProduct.twig }
    worker: twig
    entry_point: product.twig
    context: objects/context.php
    asserts: objects/PropertyAccessorSuite.php

layout_basic:
    question: |
        Time to give your beautiful page a layout! We've created a layout
        for you called, creatively, `layout.twig`. By looking at this file,
        change the `product.twig` template so that it extends `layout.twig`
        and that its content shows up in the body of the page.
    skeletons:
        product.twig: basicProduct.twig
        layout.twig:  layout.twig
    worker: twig
    entry_point: product.twig
    context: objects/context.php
    asserts: layout/BasicLayoutSuite.php

layout_title_block:
    question: |
        Great! Let's customize the "title" element on our page! Create a new
        block called `title` in `layout.twig` and use it in `product.twig`
        to change the title to "Products Home".
    skeletons:
        product.twig: basicProduct.twig
        layout.twig:  layout.twig
    worker: twig
    entry_point: product.twig
    context: objects/context.php
    asserts: layout/TitleBlockSuite.php
